// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tokens.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO tokens (user_id, value, expires_at)
VALUES ($1, $2, $3)
`

type CreateRefreshTokenParams struct {
	UserID    pgtype.UUID
	Value     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createRefreshToken, arg.UserID, arg.Value, arg.ExpiresAt)
	return err
}

const deleteRefreshTokenByValue = `-- name: DeleteRefreshTokenByValue :exec
DELETE FROM tokens
WHERE value = $1
`

func (q *Queries) DeleteRefreshTokenByValue(ctx context.Context, value string) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenByValue, value)
	return err
}

const getRefreshTokenByValue = `-- name: GetRefreshTokenByValue :one
SELECT user_id, value, expires_at FROM tokens
WHERE value = $1
`

func (q *Queries) GetRefreshTokenByValue(ctx context.Context, value string) (Token, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByValue, value)
	var i Token
	err := row.Scan(&i.UserID, &i.Value, &i.ExpiresAt)
	return i, err
}
